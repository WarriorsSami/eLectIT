schema {
  query: Query
  mutation: Mutation
}

type Query {
  login(email: String!, password: String!): AuthResponse!
  me: User

  electionById(id: ID!): Election
  elections: [Election!]
  ongoingElections: [Election!]
  pastElections: [Election!]

  myVoteByElectionId(electionId: ID!): Vote
  myVotes: [Vote!]
}

type Mutation {
  register(credentials: UserInput!): AuthResponse!

  createElection(election: ElectionInput!): Election!
  updateElection(electionId: ID!, election: UpdateElectionInput!): Election!

  addCandidate(electionId: ID!, candidate: CandidateInput!): Election!
  removeCandidate(electionId: ID!, candidateId: ID!): Election!

  vote(electionId: ID!, candidateId: ID!): Vote!
}

##### DTOs #####

type AuthResponse {
  token: String!
  user: User!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  nationalId: String
  role: Role!
}

input ElectionInput {
  title: String!
  description: String!
  startTimestamp: Int!
  duration: Int!
  candidates: [CandidateInput!]
}

input UpdateElectionInput {
  title: String
  description: String
  startTimestamp: Int
  duration: Int
}

input CandidateInput {
  name: String!
  party: String!
  manifesto: String!
  pictureUrl: String
}

##### Entities #####

type User {
  id: ID!
  name: String!
  email: String!
  nationalId: String
  role: Role!
  participatedInElections: [Election!]
  createdElections: [Election!]
}

enum Role {
  VOTER
  ORGANIZER
}

type Election {
  id: ID!
  title: String!
  description: String!
  startTimestamp: Int!
  duration: Int!
  candidates: [Candidate!]
}

type Candidate {
  id: ID!
  name: String!
  party: String!
  manifesto: String!
  pictureUrl: String
}

type Vote {
  id: ID!
  createdAt: Int!
  election: Election!
  candidate: Candidate!
}
